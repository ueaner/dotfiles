# https://github.com/mathiasbynens/dotfiles/blob/main/.gitconfig
# https://git-scm.com/docs/git-config#SCOPES
# git config global:
# - $XDG_CONFIG_HOME/git/config
# - $XDG_CONFIG_HOME/git/ignore
# - $XDG_CONFIG_HOME/git/attributes
#
# [include]
#     path = ~/.gitconfig.local
#

[alias]

    root = rev-parse --show-toplevel

    # View abbreviated SHA, description, and history graph of the latest 20 commits.
    l = log --pretty=oneline -n 20 --graph --abbrev-commit --stat
    ld = "-c diff.external=difft log -p --ext-diff"

    # View the current working tree status using the short format.
    s = status -sb

    a = add

    # Show the diff between the latest commit and the current state.
    # d = difftool
    d = diff

    dd = "!d() { GIT_EXTERNAL_DIFF=difft git diff $@; }; d"

    # `git di $number` shows the diff between the state `$number` revisions ago and the current state.
    di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

    # Pull in remote changes for the current repository and all its submodules.
    p = pull --recurse-submodules

    # Clone a repository including all submodules.
    c = clone --recursive

    # Switch to a branch, creating it if necessary.
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

    ca = commit -a
    ci = commit
    co = checkout
    cp = cherry-pick

    # Show verbose output about tags, branches or remotes
    #ts = tag -l -n9
    ts = for-each-ref --sort=creatordate --format '%(creatordate:short)  %(refname:strip=2)' refs/tags
    #ts = for-each-ref --sort=creatordate --format '%(creatordate:short)  %(tag)' refs/tags
    br = branch -vv
    bs = branch -a -vv

    # List aliases.
    aliases = config --get-regexp alias

    # Amend the currently staged files to the latest commit.
    amend = commit --amend --reuse-message=HEAD

    # Credit an author on the latest commit.
    credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

    # Interactive rebase with the given number of latest commits.
    reb = "!r() { git rebase -i HEAD~$1; }; r"

    # Remove the old tag with this name and tag the latest commit with it.
    retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"

    # Find tags containing commit
    ft = "!f() { git describe --always --contains $1; }; f"

    # Find commits by source code
    fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

    # Remove branches that have already been merged with main.
    # a.k.a. ‘delete merged’
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

    # for github remotes
    pr  = "!f() { git fetch -fu ${2:-$(git remote |grep ^upstream || echo origin)} refs/pull/$1/head:pr/$1 && git checkout pr/$1; }; f"
    pr-clean = "!git for-each-ref refs/heads/pr/* --format='%(refname)' | while read ref ; do branch=${ref#refs/heads/} ; git branch -D $branch ; done"

    # List contributors with number of commits.
    contributors = shortlog --summary --numbered

    # Show the user email for the current repository.
    whoami = config user.email

    dot = "!f() { git --git-dir=$HOME/.dotfiles --work-tree=$HOME $@; }; f"
    local = "!f() { git --git-dir=$HOME/.dotlocal/ --work-tree=$HOME/.local $@; }; f"

[apply]

    # Detect whitespace errors when applying a patch.
    whitespace = fix

[branch]

    # Show most recently changed branches first.
    sort = -committerdate

[core]

    # Use custom `.gitignore` and `.gitattributes`.
    excludesfile = ~/.config/git/ignore
    attributesfile = ~/.config/git/attributes

    # Treat spaces before tabs and all kinds of trailing whitespace as an error.
    # [default] trailing-space: looks for spaces at the end of a line
    # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space

    # Make `git rebase` safer on macOS.
    # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
    trustctime = false

    # Prevent showing files whose names contain non-ASCII symbols as unversioned.
    # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
    precomposeunicode = false

    # Speed up commands involving untracked files such as `git status`.
    # https://git-scm.com/docs/git-update-index#_untracked_cache
    untrackedCache = true

    editor = nvim
    quotepath = false

    # 始终使用 Unix-style line endings (LF), Git v2.10+
    #autocrlf = input

[color]

    # Use colors in Git commands that are capable of colored output when
    # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
    ui = auto

[color "branch"]

    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]

    meta = yellow bold
    frag = magenta bold # line info
    old = red # deletions
    new = green # additions

[color "status"]

    added = yellow
    changed = green
    untracked = cyan

[commit]

    # https://help.github.com/articles/signing-commits-using-gpg/
    # export GPG_TTY=$(tty)
    # gpgsign = true

[pager]

    difftool = true

[diff]

    # Detect copies as well as renames.
    renames = copies
    colorMoved = default
    tool = difftastic
    # Difftastic By Default
    external = difft

[diff "bin"]

    # Use `hexdump` to diff binary files.
    textconv = hexdump -v -C

[difftool]

    prompt = false

[difftool "difftastic"]

    # can not display unicode symbols
    cmd = difft "$LOCAL" "$REMOTE"

[difftool "icdiff"]

    cmd = icdiff --line-numbers $LOCAL $REMOTE

[difftool "vscode"]

    cmd = code --wait --diff $LOCAL $REMOTE

[difftool "vimdiff"]

    cmd = vimdiff $LOCAL $REMOTE

[difftool "delta"]

    cmd = delta $LOCAL $REMOTE

[merge]

    # Include summaries of merged commits in newly created merge commit messages
    log = true
    tool = vscode
    conflictstyle = diff3

[mergetool "vscode"]

    cmd = code --wait $MERGED

[help]

    # Automatically correct and execute mistyped commands.
    autocorrect = 1

[push]

    # https://git-scm.com/docs/git-config#git-config-pushdefault
    default = simple
    # Make `git push` push relevant annotated tags when pushing branches out.
    followTags = true

[pull]
    rebase = false
    ff = only

# GIT_CURL_VERBOSE=1 GIT_TRACE=1 git clone --verbose https://github.com/coco-rs/coco.fixtures2
# https://jonhnnyweslley.net/blog/how-to-rewrite-git-urls-to-clone-faster-and-push-safer/

# URL shorthands

[url "git@github.com:"]

    insteadOf = "gh:"
    pushInsteadOf = "github:"
    pushInsteadOf = "git://github.com/"

[url "git://github.com/"]

    insteadOf = "github:"

[url "git@gist.github.com:"]

    insteadOf = "gst:"
    pushInsteadOf = "gist:"
    pushInsteadOf = "git://gist.github.com/"

[url "git://gist.github.com/"]

    insteadOf = "gist:"

# 得用这个 push
[url "git@github.com:"]
    insteadOf = https://github.com/
[url "git@gitlab.com:"]
    insteadOf = https://gitlab.com/

[init]

    templateDir = ~/.config/git/template/
    defaultBranch = main

[filter "lfs"]
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true

[include]

    path = ~/.gitconfig.local
