# tmux 3.2+
# http://kkolotyuk.github.io/tmux-slides

# Hierarchy:
#  Server
#  ㄴSession
#    ㄴWindow
#      ㄴPane

# Options:
# - Session options (set-option [-g])
# - Window options (set-window-option [-g])

# set-option (alias: set)
# set -w < window option > instead of set-window-option
# set -p < pane option >
# -g: global
# -a: append

# 查看可用配置：
# $ tmux show-options -g
# $ tmux show-window-options -g

# tmux ls  -- session list
# tmux list-keys
# tmux list-commands

# tmux show-environment
# tmux showenv

# prefix z  最大化/还原 toggle, 使用 choose tree 之后也会自动还原
# prefix s  choose tree session
# prefix w  choose tree window
# h l 关闭打开 session 中包含的 window，j k 向下向上选择 window

# man tmux  DEFAULT KEY BINDINGS 可以看到默认键映射

# create : prefix + c
# detach : prefix + d
# exit : prefix + x
# 选择特定的window : prefix + 数字键

# 不支持 truecolor 的终端建立 session，支持 truecolor 的终端 attach 上显示没问题
# 反之则不行，已建立的 session 包含了 truecolor 相关信息，不支持 truecolor 的终端无法绘制

# prefix + : 进入命令行模式

# tmux prefix 键的选择，一不影响 vim 操作，二不影响终端操作，或者将影响降到最低
#
# terminal: CTRL-S/Q #阻止屏幕输出／允许屏幕输出
#
# CTRL + O jumplist / Q like v visual mode -> control flow / V visual mode / X number plus -> A / Y
# 终端上往往被用于粘贴文本 CTRL-U CTRL-Y 贴回去
#
# T ] / G current file info / J move down window /
#
# terminal Control Keys: perfrom special functions on Shell
# - Ctrl-S : Pause Display
# - Ctrl-Q : Restart Display
# - Ctrl-C : Cancel Operation
# - Ctrl-U : Cancel Line
# - Ctrl-D : Signal End of File

# C-j for perfix
# 会妨碍 vim 中从上面的窗口切到下面的窗口 CTRL-W-J
# 但这个键是排除和 vim 已用键后，最舒适的一个了
# 有用 CTRL-f 的，会拦截终端 CTRL-f 快捷键
# CTRL-Q XOFF 终端配置中关闭掉
# 使用 Alacritty 时，需要添加 - { key: Q, mods: Control, chars: "\x11" } key_bindings
# 否则 CTRL-Q 需要按两次才生效
# CTRL-Q 在 Linux 下是退出
set -g prefix C-j

#bind C-q    last-window

bind \\     split-window -h   # tmux 3.0+ 需要用 \\ 转义，或者用引号 '\'
bind |      split-window -h
bind -      split-window -v
bind x      kill-pane
bind X      kill-window
bind q      confirm-before kill-session
bind Q      confirm-before kill-server
bind <      swap-window -t :-
bind >      swap-window -t :+

bind ,      previous-window # <
bind .      next-window     # >
bind p      paste-buffer
bind n      command-prompt "rename-window %%"
bind N      command-prompt "rename-session %%"

bind C      command-prompt "new-session -s %%"
#bind r      source-file ~/.tmux.conf \; display " reloaded"
bind r      source-file ~/.config/tmux/tmux.conf \; display " reloaded"
bind R      refresh-client \; display " refresh-client"
bind a      send-keys C-a

bind h      select-pane -L
bind j      select-pane -D
bind k      select-pane -U
bind l      select-pane -R

# Resize panes, 直接鼠标拖动即可，在使用鼠标方便的时候，像这种一下子 resize 一个数字，不如拖动来的直观
#bind J      resize-pane -D 10
#bind K      resize-pane -U 10
#bind H      resize-pane -L 10
#bind L      resize-pane -R 10

# layout
#bind L      resize-pane -R 10

# display-popup
# 可以结合 fzf 做一个引导菜单，包括工具列表
#bind -n M-g display-popup -E "tmux new-session -A -s scratch"
#bind C-g display-popup -E "vim ~/.vim/vimrc.local"
bind C-g display-popup -E "slurm -i en0"
# todo
bind v display-popup -E "vim ~/.todo.md"

# prefix :setw synchronize-panes
# synchronize panes toggle (type on multiple panes)
bind m      set-window-option synchronize-panes

# (prefix :) status line command prompt key bindings
# 改为 emacs 之后需要使用 CTRL-Y 粘贴 paste buffer 内容
set -g status-keys emacs

# vim keybindings
set -gw mode-keys vi

bind Escape copy-mode

# 进入 copy-mode 然后搜索
bind /      copy-mode \; send-keys /

# vim copy selection
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle \; send-keys -X begin-selection
# 同 Enter 退出 copy mode
bind -T copy-mode-vi Escape send-keys -X cancel

# copy-selection 拷贝选中文本到 tmux 剪切板
# copy-pipe "pbcopy" 拷贝选中文本到 pbcopy 系统剪切板
# copy text and exit copy mode
# copy-selection-and-cancel copy-pipe-and-cancel

#bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "pbcopy"
#bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"



# 在使用 tmux list-keys 查看时，是以下结果
# bind-key    -T copy-mode-vi y                    if-shell "test \"$(uname)\" = \"Darwin\"" "send-keys -X copy-pipe \"pbcopy\"" "send-keys -X copy-pipe \"xclip -i -selection clipboard\""
# 使用 if-shell 查看 list-keys 时，是以下结果
# bind-key    -T copy-mode-vi y                    send-keys -X copy-pipe pbcopy
# 使用 if-shell 包裹 bind 语句会直接得到对应平台下的动作，
#    对于静态的判断，当前的操作系统，当前使用的终端（假如不会切终端 attach 上去），可能慢的动作交给配置文件解析，让执行更加快速
#    对于动态的判断，如当前 pane 是否正在使用 vim 编辑文件，更偏向于实时性，就需要把动作包装起来
# 定义的事情放在解析时，执行的动作是在运行时

# tmux 3.0a+ if-shell 语法
# if-shell <condition> { # true
#     cmd list ...
# } { # false
#     cmd list ...
# }

# if-shell "[[ $(uname -s) = Linux ]]" {
#     bind -T copy-mode-vi y send-keys -X copy-pipe "xclip -i -selection clipboard"
#     bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "xclip -i -selection clipboard"
# }
# if-shell "[[ $(uname -s) = Darwin ]]" {
#     bind -T copy-mode-vi y send-keys -X copy-pipe "pbcopy"
#     bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "pbcopy"
# }

# clipcopy clippaste 抹平系统间剪切板差异
bind -T copy-mode-vi y send-keys -X copy-pipe "clipcopy"
bind -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe "clippaste"

#is_macos='test "$(uname)" = "Darwin"'
#bind -T copy-mode-vi y if-shell "$is_macos" \
#    'send-keys -X copy-pipe "pbcopy"' \
#    'send-keys -X copy-pipe "xclip -i -selection clipboard"'
#
#bind -T copy-mode-vi MouseDragEnd1Pane if-shell "$is_macos" \
#    'send-keys -X copy-pipe "pbcopy"' \
#    'send-keys -X copy-pipe "xclip -i -selection clipboard"'


# Load OS specific extra settings
# is_mac="uname | grep -q Darwin"
# if-shell "$is_mac" "source ~/.tmux/tmux_mac.conf" "source ~/.tmux/tmux_linux.conf"

# tmux 以 non-login shell 方式运行，只加载 ~/.bashrc 文件
# ashell -> tmux -> bshell, 这里 tmux 透明传递了一些东西，如环境变量
# 保持(a=b)终端使用的 shell 和 tmux 打开的 shell 是同一个。
set -g default-command "${SHELL}"

# $TERM 256color 由终端设置决定
# nvim/runtime/autoload/health/nvim.vim: $TERM should be "screen-256color" or "tmux-256color" in tmux.
set -g default-terminal "${TERM}"
# terminfo: https://gist.github.com/bbqtd/a4ac060d6f6b9ea6fe3aabe735aa9d95
# $ curl -LO https://invisible-island.net/datafiles/current/terminfo.src.gz && gunzip terminfo.src.gz
# > /usr/local/opt/ncurses/bin/infocmp -x tmux-256color > ~/tmux-256color.src
#   编辑 ~/tmux-256color.src, because of a bug in ncurses 5.7 that interprets pairs#65536 as pairs#0
#   Before: [pairs#0x10000] or [pairs#65536]
#   After: [pairs#32767]
# > /usr/local/opt/ncurses/bin/tic -x -o $HOME/.local/share/terminfo ~/tmux-256color.src
#set -g default-terminal "tmux-256color"

# truecolor
# tmux info | grep -e RGB -e Tc
# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-rgb-colour
set -gas terminal-overrides ",*256color:Tc"
set -gas terminal-overrides ",*:RGB"
#set -gas terminal-overrides ",*:RGB,*:Se=\e[5 q"
#set -gas terminal-overrides ',*:Ss=\E[%p1%d q:Se=\E[2 q'
#set -gas terminal-features ",*:RGB"
#set -sa terminal-overrides ",xterm-kitty:RGB,*:Se=\e[5 q"



# Tc 是 tmux 扩展项，适用于任何 tmux 版本；RGB 是官方标志
# set -as terminal-overrides ",*256color:Tc"
# set -as terminal-overrides ",alacritty:Tc"
# set -as terminal-overrides ",gnome*:Tc"
# # tmux 3.2+
# set -as terminal-features ",*256color:RGB"
# set -as terminal-features ",alacritty:RGB"
# set -as terminal-features ",gnome*:RGB"

# 查看 tmux 检测到的终端功能
# $ tmux display -p '#{client_termfeatures}'
# bpaste,ccolour,clipboard,cstyle,focus,RGB,title
# 256,bpaste,focus,RGB,title


# 关闭 Esc 键的延时
set -g escape-time 0

# enable mouse
set -g mouse on

# disable bell
set -g bell-action none
set -g visual-bell off

set -g focus-events on

#-------------------------
# theme
#-------------------------

# black, red, green, yellow, blue, magenta, cyan, white, default.
# cyan is green+blue, magenta is blue+red, and yellow is red+green
# tmux 只需要使用默认颜色名称进行配色
# alacritty 的配色会自动影响到 tmux 的同一颜色名称的色彩

# Variables
#sync_ind_colour="#{?pane_synchronized,yellow,cyan}"
# setw -g window-status-format "#[fg=black,bg=${sync_ind_colour}]#I #W"

# terminal title
#set -g set-titles on
#set -g set-titles-string "❒ #S"

# 消息文本
set -g message-style fg=yellow

# clock: prefix + t
#set -gw clock-mode-colour "#{blue}"

#-------------------------
# 状态栏
#-------------------------

# 状态栏的显示位置
set -g status-position bottom

# 每60秒更新一次状态栏
#set -g status-interval 60
# 设置的时间短一些，尽可能实时显示 gitmux 信息
set -g status-interval 1

# 状态栏的样式
set -g status-style "fg=white,bg=black"
#set -g status-style fg="#{white}",bg="#{black}"

# 状态栏左侧的内容
set -g status-left "❒ #S  "
#set -g status-left-style fg=colour248

# 状态栏右侧的内容
#set -g status-right '#(uptime | rev | cut -d":" -f1 | rev | sed s/,//g) | %m-%d %H:%M '
#set -g status-right '#(uptime | rev | cut -d":" -f1 | rev | sed s/,//g) | %m-%d %H:%M | #(gitmux "#{pane_current_path}")'
set -g status-right '#(gitmux "#{pane_current_path}") #[fg=default,bg=default] %m/%d %H:%M'
set -g status-right-style default
set -g status-right-length 100

#-------------------------
# 窗口
#-------------------------

# 窗口列表在状态栏中的显示位置
set -g status-justify left

# 窗口编号从 1 开始, 而非 0
set -g base-index 1
# 允许对窗口列表重新编号 set -p < pane option >
set -gp renumber-windows on

# 关闭窗口标题自动重命名
set -g allow-rename off

# #I Index of window
# #P Index of pane
# #W Name of window

# 窗口列表的样式
set -wg window-status-style fg=blue
set -wg window-status-format         '#{?pane_synchronized,#[fg=#{brightblue}],}#I:#W '

# 「当前」窗口的样式
set -gw window-status-current-style fg=magenta
set -gw window-status-current-format '#{?pane_synchronized,#[fg=brightred],}#I:#W '

# 作为普通窗口看待
set -gw window-status-activity-style default
set -gw window-status-bell-style default
set -gw window-status-last-style default

#-------------------------
# 窗格
#-------------------------

set -gw window-style default
set -gw window-active-style default

# panes 编号从 1 开始, 而非 0
set -gw pane-base-index 1

# 设置活动 pane 的边框颜色
set -gw pane-border-style fg=blue
set -gw pane-active-border-style fg=magenta

set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time

# Window choosers are white on blue
#set-window-option -g mode-style "bg=colour18,fg=colour231"
#set-window-option -g mode-style "bg=#aacfd1,fg=colour231"

set -gw mode-style "bg=blue,fg=default"


# 加载自定义配置
if '[ -f ~/.tmux.local.conf ]' 'source ~/.tmux.local.conf'

# if-shell 'test "$(uname)" = "Darwin"' 'source ~/.tmux-osx.conf'
