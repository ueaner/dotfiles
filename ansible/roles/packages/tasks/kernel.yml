---

# ----------------------------------------------------------------
# kernel-headers/kernel
# ----------------------------------------------------------------
# Download & Install:
# ansible-playbook ~/ansible/linux.yml --extra-vars "role=packages" --tags kernel-latest -vvv
# ansible-playbook ~/ansible/linux.yml --extra-vars "role=packages" --tags kernel-closest -vvv

- name: Download / Install kernel-headers/kernel packages
  vars:
    # |-: Remove ending newline
    # noqa jinja[spacing]
    kernel_closest_version: |-
      {%- set minor_version = ansible_kernel.split('.')[0] + '.' + ansible_kernel.split('.')[1] -%}
      {%- set ns = namespace(found=false) -%}

      {%- for item in fedora['f' + ansible_distribution_version]['kernel-headers'] %}
        {%- if not ns.found %}

          {%- if item is string %}
            {%- set ns.prevk = item %}
            {%- set ns.prevv = item %}
          {%- elif item is iterable %}
            {%- set iterfirst = item | dict2items | first %}
            {%- set ns.prevk = iterfirst.key -%}
            {%- set ns.prevv = iterfirst.value -%}
          {%- endif -%}

          {%- set item_minor_version = ns.prevk.split('.')[0] + '.' + ns.prevk.split('.')[1] -%}

          {%- if item_minor_version == minor_version %}
            {%- set ns.found = true %}
            {%- set ns.closestk = ns.prevk -%}
            {%- set ns.closestv = ns.prevv -%}
          {%- endif -%}

        {%- endif -%}
      {%- endfor -%}

      {%- if ns.found %}
        {{- ns.closestk }} {{ ns.closestv -}}
      {%- endif -%}

    kernel_latest_version: |-
      {%- set item = fedora['f' + ansible_distribution_version]['kernel-headers'] | last %}
      {%- if item is string %}
        {{- item }} {{ item -}}
      {%- elif item is iterable %}
        {%- set iterfirst = item | dict2items | first %}
        {{- iterfirst.key }} {{ iterfirst.value -}}
      {%- endif -%}

    kernel_headers_packages:
      vars:
        # ~/bin/kernel-rpm-closest-version
        # version-slash: kernel-rpm-closest-version | cut -d' ' -f1 | tr '-' '/'
        # Get the kernel-headers and kernel rpm package version closest to the currently running kernel version
        version: "{{ kernel_headers_version }}"
        version-slash: "{{ kernel_headers_version.split('-') | join('/') if kernel_headers_version }}"
      # template: "{{ template['kernel-headers'].archive }}"
      template: https://kojipkgs.fedoraproject.org/packages/kernel-headers/<version-slash>/{{ ansible_architecture }}/<archive>-<version>.{{ ansible_architecture }}.rpm
      # eg: download to $XDG_BACKUP_DIR/archives/kernel-6.13.3-201.fc41.x86_64
      archives_subdir: "{{ 'kernel-' ~ kernel_version ~ '.' ~ ansible_architecture }}"
      # Using the use_remote_name parameter does not use the default installation method.
      use_remote_name: 1
      archives:
        - kernel-headers
      install: |-
        echo 'Install the kernel headers with the kernel installation.'

    kernel_packages:
      vars:
        version: "{{ kernel_version }}"
        version-slash: "{{ kernel_version.split('-') | join('/') if kernel_version }}"
      # template: "{{ template.kernel.archive }}"
      template: https://kojipkgs.fedoraproject.org/packages/kernel/<version-slash>/{{ ansible_architecture }}/<archive>-<version>.{{ ansible_architecture }}.rpm
      # eg: download to $XDG_BACKUP_DIR/archives/kernel-6.13.3-201.fc41.x86_64
      archives_subdir: "{{ 'kernel-' ~ kernel_version ~ '.' ~ ansible_architecture }}"
      use_remote_name: 1
      # archives: "{{ template.kernel.packages }}"
      archives:
        - kernel
        - kernel-core
        - kernel-devel
        - kernel-devel-matched
        - kernel-modules
        - kernel-modules-core
        - kernel-modules-extra
        - kernel-tools
        - kernel-tools-libs
      # Automatically enter the archives_subdir directory to execute scripts
      install: |-
        if type dnf &>/dev/null; then
          if [[ -z '{{ kernel_version }}' ]]; then
              echo 'Cannot determine target kernel version'
              echo 'Please check the kernel-headers versions in template.kernel-headers.versions'
              exit 1
          fi

          target_version={{ kernel_version ~ '.' ~ ansible_architecture }}
          current_version={{ ansible_kernel }}

          # Refresh packages
          sudo dnf upgrade -y --refresh --exclude=kernel\*

          # Allow install/update/downgrade of kernel* packages
          sudo sed -i '/exclude=kernel/d' /etc/dnf/dnf.conf

          # downgrade: $target_version < $current_version
          if ! printf '%s\n%s' $target_version $current_version | sort -C -V; then
              printf 'Downgrade kernel version to %s\n' $target_version
              sudo dnf downgrade -y kernel*.$(uname -m).rpm --allowerasing --skip-broken
          fi

          printf 'Install kernel-headers and kernel %s\n' $target_version
          sudo dnf install -y kernel*.$(uname -m).rpm
          # Ignore install/update/downgrade of kernel* packages
          echo 'exclude=kernel*' | sudo tee -a /etc/dnf/dnf.conf
          echo 'Installation completed.'
        fi

    broadcom_wl_packages:
      install: |-
        if type dnf &>/dev/null; then
          # Non-Broadcom wireless does not continue
          if ! lspci | grep -i network | grep -q -i broadcom; then
            exit 0
          fi

          target_version={{ kernel_version ~ '.' ~ ansible_architecture }}

          sudo dnf install -y akmods akmod-wl broadcom-wl

          echo 'kmod-wl package state:'
          rpm -qa | grep kmod-wl

          # Automatic build kmods for wl kernel module
          sudo akmods

          # Check if the new kmod-wl build was successful
          akmod_wl_version=$(rpm -q akmod-wl | sed 's/^akmod-wl-//')
          kmod_wl=$(printf 'kmod-wl-%s-%s' $target_version $akmod_wl_version)
          if rpm --quiet -q $kmod_wl; then
            echo $kmod_wl installed

            printf 'Set next boot to use kernel-%s by default\n' $target_version
            sudo grubby --set-default /boot/vmlinuz-$target_version
            sudo grubby --default-kernel
            echo 'Congratulations, now just reboot your computer and enjoy the Wi-Fi network.'
          else
            echo $kmod_wl installation failed.
          fi
        fi

  block:

    # ----------------------------------------------------------------
    # Download
    # ----------------------------------------------------------------
    # ansible-playbook ~/ansible/linux.yml --extra-vars "role=packages task=download" --tags kernel-latest -vvv
    # ansible-playbook ~/ansible/linux.yml --extra-vars "role=packages task=download" --tags kernel-closest -vvv

    - name: "Download latest kernel-headers/kernel packages - {{ kernel_headers_version ~ '/' ~ kernel_version }}"
      ansible.builtin.include_tasks: downloader.yml
      loop:
        - { key: "kernel-headers", value: "{{ kernel_headers_packages }}" }
        - { key: "kernel", value: "{{ kernel_packages }}" }
      vars:
        # Override the default kernel version defined in packages.yml with the latest kernel version
        kernel_version: "{{ kernel_latest_version.split(' ')[1] if ' ' in kernel_latest_version }}"
        kernel_headers_version: "{{ kernel_latest_version.split(' ')[0] if ' ' in kernel_latest_version }}"
        tags_extend: ['kernel-latest']
      when:
        - kernel_version
        - task != 'install'
        - ('kernel-latest' in ansible_run_tags)
      tags:
        - kernel-latest


    - name: "Download kernel-headers/kernel packages closest to the local kernel version - {{ kernel_headers_version ~ '/' ~ kernel_version }}"
      ansible.builtin.include_tasks: downloader.yml
      loop:
        - { key: "kernel-headers", value: "{{ kernel_headers_packages }}" }
        - { key: "kernel", value: "{{ kernel_packages }}" }
      vars:
        # Override the default kernel version defined in packages.yml with the latest kernel version
        kernel_version: "{{ kernel_closest_version.split(' ')[1] if ' ' in kernel_closest_version }}"
        kernel_headers_version: "{{ kernel_closest_version.split(' ')[0] if ' ' in kernel_closest_version }}"
        tags_extend: ['kernel-closest']
      when:
        - kernel_version
        - task != 'install'
        - ('kernel-closest' in ansible_run_tags)
      tags:
        - kernel-closest

    # ----------------------------------------------------------------
    # Install
    # ----------------------------------------------------------------

    # ansible-playbook ~/ansible/linux.yml --extra-vars "role=packages task=install" --tags kernel-latest -vvv
    - name: "Install latest kernel-headers/kernel packages - {{ kernel_headers_version ~ '/' ~ kernel_version }}"
      ansible.builtin.include_tasks: installer.yml
      loop:
        - { key: "kernel-headers", value: "{{ kernel_headers_packages }}" }
        - { key: "kernel", value: "{{ kernel_packages }}" }
        - { key: "broadcom-wl", value: "{{ broadcom_wl_packages }}" }
      vars:
        # Override the default kernel version defined in packages.yml with the latest kernel version
        kernel_version: "{{ kernel_latest_version.split(' ')[1] if ' ' in kernel_latest_version }}"
        kernel_headers_version: "{{ kernel_latest_version.split(' ')[0] if ' ' in kernel_latest_version }}"
        tags_extend: ['kernel-latest']
      when:
        - ansible_distribution == "Fedora"
        - kernel_version
        - task != 'download'
        - ('kernel-latest' in ansible_run_tags)
      tags:
        - kernel-latest

    # ansible-playbook ~/ansible/linux.yml --extra-vars "role=packages task=install" --tags kernel-closest -vvv
    - name: "Install kernel-headers/kernel packages closest to the local kernel version - {{ kernel_headers_version ~ '/' ~ kernel_version }}"
      ansible.builtin.include_tasks: installer.yml
      loop:
        - { key: "kernel-headers", value: "{{ kernel_headers_packages }}" }
        - { key: "kernel", value: "{{ kernel_packages }}" }
        - { key: "broadcom-wl", value: "{{ broadcom_wl_packages }}" }
      vars:
        # Override the default kernel version defined in packages.yml with the latest kernel version
        kernel_version: "{{ kernel_closest_version.split(' ')[1] if ' ' in kernel_closest_version }}"
        kernel_headers_version: "{{ kernel_closest_version.split(' ')[0] if ' ' in kernel_closest_version }}"
        tags_extend: ['kernel-closest']
      when:
        - ansible_distribution == "Fedora"
        - kernel_version
        - task != 'download'
        - ('kernel-closest' in ansible_run_tags)
      tags:
        - kernel-closest
