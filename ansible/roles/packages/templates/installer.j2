#!/usr/bin/env bash
# vim: set ft=bash:
# set -o pipefail
# set -xe
# archives_dir="{{ archives_dir if item.value.archives_dir is not defined or not item.value.archives_dir else item.value.archives_dir }}"
archives_dir="{{ archives_dir }}"
archives_server="{{ archives_server }}"
archives_subdir="{{ item.value.archives_subdir if item.value.archives_subdir is defined }}"
archives_provider="http"
archives_base_url="$archives_server"
# archives_server starts with https/http
# shellcheck disable=SC2050
if [[ "{{ archives_server }}" =~ ^https?:// ]]; then
    if [[ -n "$archives_subdir" ]]; then
        archives_base_url="$archives_server/$archives_subdir"
    fi
else
    archives_provider="file"
    [[ ! -d "$archives_dir/$archives_subdir" ]] && mkdir -p "$archives_dir/$archives_subdir"
    [[ ! -d "$HOME/.cache/archives" ]] && mkdir -p "$HOME/.cache/archives"
    # shellcheck disable=SC2164
    cd "$archives_dir"
fi

# shellcheck disable=SC2034
name="{{ item.key }}"
archives_yaml="{{ item.value.archives if item.value.archives is defined }}"
dst="{{ item.value.dst if item.value.dst is defined }}"
strip="{{ item.value.strip if item.value.strip is defined }}"
include="{{ item.value.include if item.value.include is defined }}"
if [[ -n "$include" ]]; then
    include=$(echo "$include" | yq 'join(" ")')
    if [[ -n "$strip" && "$strip" -gt 0 ]]; then
        tmp=
        for item in $include; do
            # include starts with */
            if [[ "$item" =~ ^\*/ ]]; then
                tmp="$item "
            else
                tmp="*/$item "
            fi
        done
        include=$tmp
    fi
    # tar xf wasm-pack-linux-x86_64.tar.gz --strip=1 -C ~/.local/bin '*/wasm-pack'
    # glob * passed as part of a variable without quotes
    # include=$(printf "'%s' " $include)
fi
opts=
if [[ -n "$strip" && "$strip" =~ ^[1-9]$ ]]; then
    opts="--strip=$strip"
else
    strip=
fi

# replace $ to \$
install_script="{{ item.value.install | replace('$','\$') if item.value.install is defined }}"
install_post_script="{{ item.value['install-post'] | replace('$','\$') if item.value['install-post'] is defined }}"

# install-package "$local_file"
install-package() {
    local local_file=$1
    local dst=$2

    # dst

    if [[ -z "$dst" ]]; then
        # dst defaults to $XDG_BIN_HOME
        dst=$XDG_BIN_HOME
    elif [[ "$dst" = "~"* ]]; then
        # Replace ~ with $HOME
        dst="${HOME}${dst:1}"
    fi
    echo "Install $local_file to '$dst'"

    # Backup subdirectory under $XDG_DATA_HOME
    if [[ "${dst}" =~ ^$XDG_DATA_HOME/ && "$dst" != "$XDG_DATA_HOME/" ]]; then
        [[ -d "${dst}" ]] && mv "${dst}" "${dst}.bak"
    fi
    [[ ! -d "$dst" ]] && mkdir -p "$dst"

    # Extract

    local ret

    if [[ "$local_file" =~ ^https?:// ]]; then
        local tmpfile
        tmpfile=$(mktemp "/tmp/XXXXXXX-$(basename "$local_file")")
        curl -C - -L "$local_file" -o "$tmpfile"
        echo "curl -C - -L $local_file -o $tmpfile"
        case "$local_file" in
        *.tar.gz.zip)
            # shellcheck disable=SC2086
            unzip -p $tmpfile | tar -x $opts -C $dst $include
            ret=$?
            echo "unzip -p $tmpfile | tar -x $opts -C $dst $include"
            ;;
        *.zip)
            # shellcheck disable=SC2086
            unzip -o $tmpfile $opts -d $dst $include
            ret=$?
            echo "unzip -o $tmpfile $opts -d $dst $include"
            ;;
        *.tar.gz | *.tgz | *.tar.bz2 | *.tbz | *.tbz2 | *.tar.xz | *.txz | .tar)
            # shellcheck disable=SC2086
            tar xf $tmpfile $opts -C $dst $include
            ret=$?
            echo "tar xf $tmpfile $opts -C $dst $include"
            ;;
        *.gz)
            if [[ -z "$include" || "$include" = *' '* ]]; then
                ret=1
            else
                curl -s -L "$tmpfile" | gzip -dkc >"$dst/$include"
                ret=$?
                echo "curl -s -L $tmpfile | gzip -dkc >$dst/$include"
            fi
            ;;
        *) # *.jar, etc.
            # shellcheck disable=SC2086
            cp $tmpfile $dst
            ret=$?
            echo "cp $tmpfile $dst"
            ;;
        esac

    else
        case "$local_file" in
        *.tar.gz.zip)
            # shellcheck disable=SC2086
            unzip -p $local_file | tar -x $opts -C $dst $include
            ret=$?
            echo "unzip -p $local_file | tar -x $opts -C $dst $include"
            ;;
        *.zip)
            # shellcheck disable=SC2086
            unzip -o $local_file $opts -d $dst $include
            ret=$?
            echo "unzip -o $local_file $opts -d $dst $include"
            ;;
        *.tar.gz | *.tgz | *.tar.bz2 | *.tbz | *.tbz2 | *.tar.xz | *.txz | .tar)
            # shellcheck disable=SC2086
            tar xf $local_file $opts -C $dst $include
            ret=$?
            echo "tar xf $local_file $opts -C $dst $include"
            ;;
        *.gz)
            if [[ -z "$include" || "$include" = *' '* ]]; then
                ret=1
            else
                gzip -dkc "$local_file" >"$dst/$include"
                ret=$?
                echo "gzip -dkc $local_file >$dst/$include"
            fi
            ;;
        *) # *.jar, etc.
            # shellcheck disable=SC2086
            cp $local_file $dst
            ret=$?
            echo "cp $local_file $dst"
            ;;
        esac

    fi

    if [[ $ret -eq 0 ]]; then
        [[ -d "${dst}.bak" ]] && rm -rf "${dst}.bak"
    else
        [[ -d "${dst}.bak" ]] && mv "${dst}.bak" "${dst}"
    fi

    return $ret
}

ret=0

if [[ -z "$install_script" ]]; then
    # By default, the package is extracted to dst to complete the installation.
    while IFS='' read -r line; do archives+=("$line"); done < <(echo "$archives_yaml" | yq '.[]')
    for archive in "${archives[@]}"; do
        # Converting scalar kind to map kind
        [[ "$(echo "$archive" | yq kind)" == "scalar" ]] && archive="{'$archive': '$archive'}"
        local_file=$(echo "$archive" | yq 'to_entries[0] | .key')
        # archive_value=$(echo "$archive" | yq 'to_entries[0] | .value')

        # local_file

        # Check if the package is suitable for the current platform
        # if [[ "$local_file" == *"x86_64"* || "$local_file" == *"aarch64"* ]]; then
        if [[ "$local_file" == *"linux"* || "$local_file" == *"darwin"* ]]; then
            kernel=$(uname -s | tr '[:upper:]' '[:lower:]')
            # Darwin/Linux-x86_64/aarch64
            architecture=$(echo "$(uname -s)-$(uname -m)" | tr '[:upper:]' '[:lower:]')
            desktop=$(echo "$(uname -s)-$(uname -m)-{{ desktop }}" | tr '[:upper:]' '[:lower:]')
            if [[ ! "$local_file" == *"-${kernel}."* ]] &&
                [[ ! "$local_file" == *"-${architecture}."* ]] &&
                [[ ! "$local_file" == *"-${desktop}."* ]]; then
                echo "$local_file not suitable for current platform"
                continue
            fi
        else
            echo "$local_file is a common platform package"
        fi

        check_code=0
        if [[ "$archives_provider" == "http" ]]; then
            local_file="$archives_base_url/$local_file"
            curl -L --output /dev/null --silent --fail -r 0-0 "$local_file"
            check_code=$?
        else
            [[ -f "${local_file}" ]]
            check_code=$?
        fi

        if [[ $check_code -ne 0 ]]; then
            echo "No such file ($local_file). Skipping install/upgrade"
            exit $check_code
        fi

        # 3. Install/Upgrade
        install-package "$local_file" "$dst"
    done

    ret=$?
    echo "install-package ret: $ret"
    if [[ $ret -ne 0 ]]; then
        exit $ret
    fi
else
    # Execute custom installation scripts
    bash -c "$install_script"
    ret=$?
    echo "install_script ret: $ret"
    if [[ $ret -ne 0 ]]; then
        exit $ret
    fi
fi

if [[ -n "$install_post_script" ]]; then
    bash -c "$install_post_script"
    ret=$?
    echo "install_post_script ret: $ret"
    env
    if [[ $ret -ne 0 ]]; then
        exit $ret
    fi
fi

echo "at last ret: $ret"
if [[ $ret -ne 0 ]]; then
    exit $ret
fi
